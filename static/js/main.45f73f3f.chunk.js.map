{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","_this","this","react_default","a","createElement","key","props","id","className","text","emoji","getUnicode","onClick","removeCardCallback","Component","EMOJI_LIST","NewCardForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","resetState","setState","onFormChange","event","field","target","name","value","updatedState","onSubmit","preventDefault","state","addCardCallback","emojiOptions","map","emojiName","i","placeholder","onChange","htmlFor","type","Board","addCard","newCard","url","boardName","axios","post","then","response","cards","data","card","concat","toConsumableArray","errorMessage","catch","error","message","removeCard","cardId","delete","deletedCard","find","splice","indexOf","populateCards","src_components_Card","_this2","get","cardHash","src_components_NewCardForm","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.45f73f3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nclass Card extends Component {\n  render() {\n    return (\n      <div key={this.props.id} className=\"card\">\n        <section className=\"card__content\">\n          <section className=\"card__content-text\">\n            {this.props.text}\n          </section>\n          <section className=\"card__content-emoji\">\n            {this.props.emoji && <p>{emoji.getUnicode(this.props.emoji) ? emoji.getUnicode(this.props.emoji) : this.props.emoji}</p>}\n          </section>\n        </section>\n        <div className=\"card__delete\" onClick={() => this.props.removeCardCallback(this.props.id)}>X</div>\n\n      </div>\n    )\n  }\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string,\n  removeCardCallback: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nclass NewCardForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      emoji: \"\",\n    };\n  }\n\n  resetState = () => {\n    this.setState({\n      text: \"\",\n      emoji: \"\",\n    });\n  }\n\n  onFormChange = (event) => {\n    const field = event.target.name;\n    const value = event.target.value;\n\n    const updatedState = {};\n    updatedState[field] = value;\n    this.setState(updatedState);\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.text === '') return;\n\n    this.props.addCardCallback(this.state);\n    this.resetState();\n  }\n\n  emojiOptions = () => {\n    return EMOJI_LIST.map((emojiName, i) => {\n      return <option key={i} value={emojiName}>{emoji.getUnicode(emojiName)}</option>;\n    })\n  }\n\n  render() {\n    return (\n\n        <form onSubmit={this.onSubmit} className=\"new-card-form\">\n          <h2 className=\"new-card-form__header\">Add a Card!</h2>\n          <div className=\"new-card-form\">\n            <textarea className=\"new-card-form__form-textarea\" name=\"text\" placeholder=\"inspirational note\" onChange={this.onFormChange} value={this.state.text} />\n          </div>\n\n          <div className=\"new-card-form\">\n            <label className=\"new-card-form__form-label\" htmlFor=\"emoji\">Emoji</label>\n            <select className=\"new-card-form__form-select\" name=\"emoji\" value={this.state.emoji} onChange={this.onFormChange}>\n              {this.emojiOptions()}\n            </select>\n          </div>\n\n          <div className=\"new-card-form\">\n            <input className=\"new-card-form__form-button\" type=\"submit\" name=\"submit\" value=\"Add a Card\" />\n          </div>\n        </form>\n    );\n  }\n\n\n}\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n};\n\nexport default NewCardForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\n\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n      errorMessage: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const url = this.props.url + this.props.boardName + \"/cards\";\n    axios.get(url)\n      .then((response) => {\n        const cards = response.data.map((cardHash) => {\n          return cardHash[\"card\"];\n        })\n        const errorMessage = \"\";\n        this.setState({cards, errorMessage});\n\n      })\n      .catch((error) => {\n        const errorMessage = error.message;\n        this.setState({errorMessage});\n      });\n  }\n\n  addCard = (newCard) => {\n    const url = this.props.url + this.props.boardName + \"/cards\";\n    axios.post(url, newCard)\n      .then((response) => {\n\n        const newCard = response.data.card;\n        const cards = [newCard, ...this.state.cards];\n        const errorMessage = \"\";\n        this.setState({cards, errorMessage});\n\n      })\n      .catch((error) => {\n        const errorMessage = error.message;\n        this.setState({errorMessage});\n      })\n\n  }\n\n  removeCard = (cardId) => {\n    const url = \"https://inspiration-board.herokuapp.com/cards/\" + cardId;\n\n    axios.delete(url)\n\n      .then((response) => {\n        const cards = [...this.state.cards];\n        const deletedCard = cards.find((card) => card.id === cardId);\n        cards.splice(cards.indexOf(deletedCard), 1);\n        const errorMessage = \"\";\n        this.setState({cards, errorMessage});\n      })\n      .catch((error) => {\n        const errorMessage = error.message;\n        this.setState({errorMessage});\n      })\n\n  }\n\n  populateCards = () => {\n    return this.state.cards.map((card) => {\n      return <Card key={card.id} id={card.id} text={card.text} emoji={card.emoji} removeCardCallback={this.removeCard}/>\n    });\n  }\n\n  render() {\n    return (\n      <section>\n        {this.state.errorMessage && <section>{this.state.errorMessage}</section>}\n        <NewCardForm addCardCallback={this.addCard}/>\n        <div className='board'>\n          {this.populateCards()}\n        </div>\n      </section>\n\n    )\n  }\n\n}\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired,\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <header className=\"header\">\n          <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        </header>\n        <Board\n          url=\"https://inspiration-board.herokuapp.com/boards/\"\n          boardName=\"Daniela\"\n          />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}